{"version":3,"sources":["containers/Counter.js","actions.js","App.js","store/reducers/counter.js","store/reducers/results.js","index.js"],"names":["Counter","this","props","ctr","onClick","onIncCounter","onDropCounter","addCounter","removeCounter","onStoreCounter","storedResult","map","item","key","id","onDeleteCounter","value","Component","connect","state","counter","res","results","dispatch","type","result","resultElementId","App","initialState","reducer","action","concat","Date","filter","rootReducer","combineReducers","counterReducer","resultsReducer","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"6RAIMA,E,iLAuBQ,IAAD,OACL,OACI,6BACI,8CAAoBC,KAAKC,MAAMC,KAC/B,6BACI,4BAAQC,QAASH,KAAKC,MAAMG,cAA5B,YACA,4BAAQD,QAASH,KAAKC,MAAMI,eAA5B,cACA,4BAAQF,QAASH,KAAKC,MAAMK,YAA5B,YACA,4BAAQH,QAASH,KAAKC,MAAMM,eAA5B,eAEA,4BAAQJ,QAAS,kBAAM,EAAKF,MAAMO,eAAe,EAAKP,MAAMC,OAA5D,gBAEA,4BACKF,KAAKC,MAAMQ,aAAaC,KAAI,SAAAC,GAAI,OAC7B,wBAAIC,IAAKD,EAAKE,GAAIV,QAAS,kBAAM,EAAKF,MAAMa,gBAAgBH,EAAKE,MAAMF,EAAKI,iB,GArClFC,aAiEPC,eAlBS,SAAAC,GACpB,MAAO,CACHhB,IAAKgB,EAAMhB,IAAIiB,QACfV,aAAcS,EAAME,IAAIC,YAIL,SAAAC,GACvB,MAAO,CACHlB,aAAc,kBAAMkB,EAAS,CAACC,KC5Db,eD6DjBlB,cAAe,kBAAMiB,EAAS,CAACC,KC5DnB,UD6DZjB,WAAY,kBAAMgB,EAAS,CAACC,KC5DjB,MD4DwCR,MAAM,KACzDR,cAAe,kBAAMe,EAAS,CAACC,KC5DjB,SD4D2CR,MAAM,KAC/DP,eAAgB,SAACgB,GAAD,OAAYF,EAAS,CAACC,KC5DlB,eD4DkDC,OAAQA,KAC9EV,gBAAiB,SAACD,GAAD,OAAQS,EAAS,CAACC,KC5Dd,gBD4D+CE,gBAAiBZ,QAI9EI,CAA6ClB,GEzD7C2B,EARH,WACV,OACE,6BACE,kBAAC,EAAD,Q,ukBCJN,IAAMC,EAAe,CACjBR,QAAS,IA8BES,EA3BC,WAAmC,IAAlCV,EAAiC,uDAAzBS,EAAcE,EAAW,uCAC9C,OAAQA,EAAON,MACX,IFTiB,YEUb,OAAO,EAAP,GACOL,EADP,CAEIC,QAASD,EAAMC,QAAS,IAEhC,IFbY,OEcR,OAAO,EAAP,GACOD,EADP,CAEIC,QAASD,EAAMC,QAAS,IAEhC,IFjBW,MEkBP,OAAO,EAAP,GACOD,EADP,CAEIC,QAASD,EAAMC,QAAUU,EAAOd,QAExC,IFrBc,SEsBV,OAAO,EAAP,GACOG,EADP,CAEIC,QAASD,EAAMC,QAAUU,EAAOd,QAI5C,OAAOG,G,yjBC5BX,IAAMS,EAAe,CACjBN,QAAS,IAoBEO,EAjBC,WAAmC,IAAlCV,EAAiC,uDAAzBS,EAAcE,EAAW,uCAC9C,OAAQA,EAAON,MACX,IHLoB,eGMhB,OAAO,KACAL,EADP,CAEIG,QAASH,EAAMG,QAAQS,OAAO,CAACjB,GAAI,IAAIkB,KAAQhB,MAAOc,EAAOL,WAErE,IHTqB,gBGUjB,OAAO,KACAN,EADP,CAEIG,QAASH,EAAMG,QAAQW,QAAO,SAAAR,GAAM,OAAIA,EAAOX,KAAOgB,EAAOJ,qBAIzE,OAAOP,GCXLe,EAAcC,YAAgB,CAChChC,IAAKiC,EACLf,IAAKgB,IAGHC,EAAQC,YAAYL,GAE1BM,IAASC,OAAO,kBAAC,IAAD,CAAUH,MAASA,GAAQ,kBAAC,EAAD,OAAoBI,SAASC,eAAe,W","file":"static/js/main.4018a906.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actionTypes from '../actions'\n\nclass Counter extends Component {\n    // REDUXIN TAKIA NÄMÄ VOI JÄTTÄÄ POIS\n    // state = {\n    //     counter: 10\n    // }\n\n    // counterChangedHandler = (action, value) => {\n    //     switch (action) {\n    //         case 'addOne':\n    //             this.setState( ( prevState) => { return { counter: prevState.counter + 1 } } )\n    //             break;\n    //         case 'dropOne':\n    //             this.setState( ( prevState) => { return { counter: prevState.counter - 1 } } )\n    //             break;\n    //         case 'addValue':\n    //             this.setState( ( prevState) => { return { counter: prevState.counter + value } } )\n    //             break;\n    //         case 'dropValue':\n    //             this.setState( ( prevState) => { return { counter: prevState.counter - value } } )\n    //             break;\n    //     }\n    // }\n\n    render() {\n        return (\n            <div>\n                <h2>Your score is: {this.props.ctr}</h2>\n                <div>\n                    <button onClick={this.props.onIncCounter}>Add one </button>\n                    <button onClick={this.props.onDropCounter}>Remove one</button>\n                    <button onClick={this.props.addCounter}>Add five</button>\n                    <button onClick={this.props.removeCounter}>Remove five</button>\n               \n                    <button onClick={() => this.props.onStoreCounter(this.props.ctr)}>Store result</button> \n\n                    <ul>\n                        {this.props.storedResult.map(item => (\n                            <li key={item.id} onClick={() => this.props.onDeleteCounter(item.id)}>{item.value}</li>\n                        ))}   \n                    </ul>\n                \n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        ctr: state.ctr.counter,\n        storedResult: state.res.results\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onIncCounter: () => dispatch({type: actionTypes.INCREMENT}),\n        onDropCounter: () => dispatch({type: actionTypes.DROP}),\n        addCounter: () => dispatch({type: actionTypes.ADD, value:5}),\n        removeCounter: () => dispatch({type: actionTypes.REMOVE, value:5}), \n        onStoreCounter: (result) => dispatch({type: actionTypes.STORE_RESULT, result: result}), \n        onDeleteCounter: (id) => dispatch({type: actionTypes.DELETE_RESULT, resultElementId: id}) \n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter);","export const INCREMENT = 'INCREMENT'\nexport const DROP = 'DROP'\nexport const ADD = 'ADD'\nexport const REMOVE = 'REMOVE'\nexport const STORE_RESULT = 'STORE_RESULT'\nexport const DELETE_RESULT = 'DELETE_RESULT'\n\n\n","import React from 'react';\nimport './App.css';\nimport Counter from './containers/Counter';\n\nconst App = () => {\n  return (\n    <div>\n      <Counter />\n    </div>\n  );\n}\n\nexport default App;\n","import * as actionTypes from '../../actions';\n\n\nconst initialState = {\n    counter: 42,\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.INCREMENT:\n            return {\n                ...state,\n                counter: state.counter +1\n            }             \n        case actionTypes.DROP:\n            return {\n                ...state,\n                counter: state.counter -1\n            }       \n        case actionTypes.ADD :            \n            return {\n                ...state,\n                counter: state.counter + action.value\n            }                    \n        case actionTypes.REMOVE:       \n            return {\n                ...state,\n                counter: state.counter - action.value\n            }                  \n    }\n\n    return state;\n}    \n  \nexport default reducer;","import * as actionTypes from '../../actions';\n\n\nconst initialState = {\n    results: []\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {        \n        case actionTypes.STORE_RESULT:\n            return {\n                ...state,\n                results: state.results.concat({id: new Date(), value: action.result})\n            }\n        case actionTypes.DELETE_RESULT:\n            return {\n                ...state,\n                results: state.results.filter(result => result.id !== action.resultElementId)\n            }        \n    }\n\n    return state;\n}    \n  \nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { createStore, combineReducers } from 'redux';\nimport { Provider } from 'react-redux';\n\nimport counterReducer from './store/reducers/counter';\nimport resultsReducer from './store/reducers/results';\n\nconst rootReducer = combineReducers({\n    ctr: counterReducer,\n    res: resultsReducer\n})\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(<Provider store= { store }><App /></Provider>, document.getElementById('root'));\n\n\n"],"sourceRoot":""}